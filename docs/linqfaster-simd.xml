<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LinqFasterSIMD</name>
    </assembly>
    <members>
        <member name="T:JM.LinqFaster.SIMD.LinqFasterSIMD">
            <summary>
            SIMD accelerated Linq-style extension methods for arrays.
            </summary>
        </member>
        <member name="M:JM.LinqFaster.SIMD.LinqFasterSIMD.AverageS``1(``0[])">
            <summary>
            Calculates the average value of an array using SIMD.
            </summary>        
            <param name="source">The sequence of primitive values to average</param>
            <returns>The average of the sequence of values as a double</returns>
        </member>
        <member name="M:JM.LinqFaster.SIMD.LinqFasterSIMD.AverageS``2(``0[],System.Func{System.Numerics.Vector{``0},System.Numerics.Vector{``1}},System.Func{``0,``1})">
            <summary>
            Calculates the average value of an array via a selector using SIMD.
            </summary>        
            <param name="source">The sequence of primitive values to transform then average</param>
            <param name="selectorSIMD">A transformation function to operate on vectors.</param>
            <param name="selector">A transformation function to operate on leftover elements.</param>
            <returns>The average of the transformed sequence of values as a double</returns>
        </member>
        <member name="M:JM.LinqFaster.SIMD.LinqFasterSIMD.AverageSf``1(``0[])">
            <summary>
            Calculates the average value of an array using SIMD.
            </summary>        
            <param name="source">The sequence of primitive values to average</param>
            <returns>The average of the sequence of values as a float</returns>
        </member>
        <member name="M:JM.LinqFaster.SIMD.LinqFasterSIMD.AverageSf``2(``0[],System.Func{System.Numerics.Vector{``0},System.Numerics.Vector{``1}},System.Func{``0,``1})">
            <summary>
            Calculates the average value of an array via a selector using SIMD.
            </summary>        
            <param name="source">The sequence of primitive values to transform then average</param>
            <param name="selectorSIMD">A transformation function to operate on vectors.</param>
            <param name="selector">A transformation function to operate on leftover elements.</param>
            <returns>The average of the transformed sequence of values as a double</returns>
        </member>
        <member name="M:JM.LinqFaster.SIMD.LinqFasterSIMD.ContainsS``1(``0[],``0)">
            <summary>
            Determines whether an array contains a specified element 
            using SIMD.        
            </summary>        
            <param name="source">An array in which to locate a value.</param>
            <param name="value">The value to locate.</param>        
            <returns>true if the source sequence contains an element that has the specified value; otherwise, false.</returns>
        </member>
        <member name="M:JM.LinqFaster.SIMD.LinqFasterSIMD.MaxS``1(``0[])">
            <summary>
            Finds the maximum value the sequence using SIMD
            </summary>        
            <param name="source">A sequence of primitive values</param>
            <returns>The maximum value in the sequence</returns>
        </member>
        <member name="M:JM.LinqFaster.SIMD.LinqFasterSIMD.MinS``1(``0[])">
            <summary>
            Finds the minimum value in a sequence using SIMD.
            </summary>        
            <param name="source">A sequence of primitive values</param>
            <returns>The minimum value in the sequence</returns>
        </member>
        <member name="M:JM.LinqFaster.SIMD.LinqFasterSIMD.RangeS(System.Int32,System.Int32)">
            <summary>
            Generates a sequence of integral numbers within a specified range
            using SIMD
            </summary>
            <param name="start">The value of the first integer in the sequence.</param>
            <param name="len">The number of sequential integers to generate.</param>
            <returns>A sequence that contains a range of sequential integral numbers.</returns>
        </member>
        <member name="M:JM.LinqFaster.SIMD.LinqFasterSIMD.RepeatS``1(``0,System.Int32)">
            <summary>
            Generates a sequence that contains one repeated value using SIMD.
            </summary>        
            <param name="e">The value to be repeated.</param>
            <param name="count">The number of times to repeat the value in the generated sequence.</param>
            <returns>A sequence that contains a repeated value</returns>
        </member>
        <member name="M:JM.LinqFaster.SIMD.LinqFasterSIMD.SelectS``2(``0[],System.Func{System.Numerics.Vector{``0},System.Numerics.Vector{``1}},System.Func{``0,``1})">
            <summary>
            Projects each element of a sequence into a new form with SIMD.
            </summary>        
            <param name="source">The sequence of primitive values to transform.</param>
            <param name="slectorSIMD">A transformation function that operates on Vectors.</param>
            <param name="selector">An optional selection function to transform the leftover values.</param>
            <returns>A sequence of transformed values.</returns>        
        </member>
        <member name="M:JM.LinqFaster.SIMD.LinqFasterSIMD.SelectInPlaceS``1(``0[],System.Func{System.Numerics.Vector{``0},System.Numerics.Vector{``0}},System.Func{``0,``0})">
            <summary>
            Selects/Maps in place each element of a sequence into a new form with SIMD.
            </summary>        
            <param name="source">The sequence of primitive values to transform.</param>
            <param name="slectorSIMD">A transformation function that operates on Vectors.</param>
            <param name="selector">An optional selection function to transform the leftover values.</param>        
        </member>
        <member name="M:JM.LinqFaster.SIMD.LinqFasterSIMD.SequenceEqualS``1(``0[],``0[])">
            <summary>
            Determines whether two sequences are equal by comparing the elements  bitwise comparison        
            </summary>        
            <param name="first">A sequence to compare to second.</param>
            <param name="second">A sequence to compare to first.</param>        
            <returns>true of the two sources are of equal length and their corresponding 
            elements are equal according to the equality comparer. Otherwise, false.</returns>
        </member>
        <member name="M:JM.LinqFaster.SIMD.LinqFasterSIMD.SumS``1(``0[])">
            <summary>
            Computes the sum of a sequence using SIMD
            </summary>        
            <param name="source">A sequence of primitive values to sum.</param>
            <returns>The sum of the sequence of values.</returns>
        </member>
        <member name="M:JM.LinqFaster.SIMD.LinqFasterSIMD.SumS``2(``0[],System.Func{System.Numerics.Vector{``0},System.Numerics.Vector{``1}},System.Func{``0,``1})">
            <summary>
            Computes the sum of a sequence of transformed values using SIMD
            </summary>        
            <param name="source">A sequence of elements to transform then sum.</param>
            <param name="selectorSIMD">A transformation function that operates on vectors. </param>
            <param name="selector">An optional transformation function to transform any leftover elements.</param>
            <returns>The sum of the sequence of transformed values.</returns>
        </member>
    </members>
</doc>
